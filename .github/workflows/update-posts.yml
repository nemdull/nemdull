name: Update Posts

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */12 * * *"   # 12時間おき

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm i xml2js node-fetch@2

      - name: Generate posts
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const fetch = require('node-fetch');
          const xml2js = require('xml2js');

          const README = 'README.md';
          const START = '<!-- posts:start -->';
          const END   = '<!-- posts:end -->';
          const FEED  = 'https://qiita.com/nemdull/feed'; // ← あなたのIDに

          const getText = (node) => {
            if (!node) return '';
            const v = Array.isArray(node) ? node[0] : node;
            if (typeof v === 'string') return v.trim();
            if (v && typeof v._ === 'string') return v._.trim();
            return '';
          };

          const getLink = (entry) => {
            const links = entry.link || [];
            const arr = Array.isArray(links) ? links : [links];
            const alt = arr.find(l => l && l.$ && (!l.$.rel || l.$.rel === 'alternate'));
            if (alt?.$?.href) return alt.$.href;
            const first = arr[0];
            if (typeof first === 'string') return first;
            if (first?.$?.href) return first.$.href;
            return '';
          };

          const getDate = (entry) => {
            const raw = getText(entry.updated) || getText(entry.published);
            if (!raw) return '';
            const d = new Date(raw);
            return isNaN(d) ? raw.slice(0,10) : d.toISOString().slice(0,10);
          };

          (async () => {
            const res = await fetch(FEED);
            if (!res.ok) throw new Error('Failed to fetch feed: ' + res.status);
            const xml = await res.text();
            const data = await xml2js.parseStringPromise(xml, { trim: true, normalize: true });

            const entries = data?.feed?.entry ?? [];
            const items = entries.slice(0,5).map(e => {
              const title = getText(e.title) || '(No title)';
              const link  = getLink(e) || '#';
              const date  = getDate(e) || '';
              return `- ${date} - [${title}](${link})`;
            }).join('\n');

            let md = fs.readFileSync(README, 'utf8');
            const block = `${START}\n${items}\n${END}`;
            const re = new RegExp(`${START}[\\s\\S]*?${END}`, 'm');
            md = re.test(md) ? md.replace(re, block) : (md + `\n\n${block}\n`);
            fs.writeFileSync(README, md);
          })().catch(err => { console.error(err); process.exit(1); });
          NODE

      - name: Commit & Push
        run: |
          git config user.name  "nemdull-bot"
          git config user.email "47370873+nemdull@users.noreply.github.com"
          git diff --quiet || (git add README.md && git commit -m "chore: update posts" && git push)
